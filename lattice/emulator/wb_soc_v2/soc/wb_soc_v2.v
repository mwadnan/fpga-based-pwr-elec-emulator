//   ==================================================================
//   >>>>>>>>>>>>>>>>>>>>>>> COPYRIGHT NOTICE <<<<<<<<<<<<<<<<<<<<<<<<<
//   ------------------------------------------------------------------
//   Copyright (c) 2006-2011 by Lattice Semiconductor Corporation
//   ------------------------------------------------------------------
//   ALL RIGHTS RESERVED
//
//   IMPORTANT: THIS FILE IS AUTO-GENERATED BY THE LATTICEMICO SYSTEM.
//
//   Permission:
//
//      Lattice Semiconductor grants permission to use this code
//      pursuant to the terms of the Lattice Semiconductor Corporation
//      Open Source License Agreement.
//
//   Disclaimer:
//
//      Lattice Semiconductor provides no warranty regarding the use or
//      functionality of this code. It is the user's responsibility to
//      verify the user’s design for consistency and functionality through
//      the use of formal verification methods.
//
//   --------------------------------------------------------------------
//
//                  Lattice Semiconductor Corporation
//                  5555 NE Moore Court
//                  Hillsboro, OR 97214
//                  U.S.A
//
//                  TEL: 1-800-Lattice (USA and Canada)
//                         503-286-8001 (other locations)
//
//                  web: http://www.latticesemi.com/
//                  email: techsupport@latticesemi.com
//
//   --------------------------------------------------------------------
//
//      Project:           wb_soc_v2
//      File:              wb_soc_v2.v
//      Date:              Di, 27 Aug 2013 22:59:26 MESZ
//      Version:           2.1
//      Targeted Family:   All
//
//   =======================================================================

`include "system_conf.v"

module arbiter1
#(
	parameter MAX_DAT_WIDTH = 32,
	parameter WBS_DAT_WIDTH = 32,
	parameter WBM0_DAT_WIDTH = 32
)(
	// Multiple Master Port0
	WBM0_ADR_O,
	WBM0_DAT_O,
	WBM0_DAT_I,
	WBM0_SEL_O,
	WBM0_WE_O,
	WBM0_ACK_I,
	WBM0_ERR_I,
	WBM0_RTY_I,
	WBM0_CTI_O,
	WBM0_BTE_O,
	WBM0_LOCK_O,
	WBM0_CYC_O,
	WBM0_STB_O,
	// Single Slave Port
	WBS_ADR_I,
	WBS_DAT_I,
	WBS_DAT_O,
	WBS_SEL_I,
	WBS_WE_I,
	WBS_ACK_O,
	WBS_ERR_O,
	WBS_RTY_O,
	WBS_CTI_I,
	WBS_BTE_I,
	WBS_LOCK_I,
	WBS_CYC_I,
	WBS_STB_I,

	clk,
	reset
);

input clk, reset;
input [31:0]WBM0_ADR_O;
input [WBM0_DAT_WIDTH-1:0] WBM0_DAT_O;
output [WBM0_DAT_WIDTH-1:0] WBM0_DAT_I;
input [WBM0_DAT_WIDTH/8-1:0] WBM0_SEL_O;
input  WBM0_WE_O;
output  WBM0_ACK_I;
output  WBM0_ERR_I;
output  WBM0_RTY_I;
input [2:0]WBM0_CTI_O;
input [1:0]WBM0_BTE_O;
input  WBM0_LOCK_O;
input  WBM0_CYC_O;
input  WBM0_STB_O;
output [31:0]WBS_ADR_I;
output [WBS_DAT_WIDTH-1:0] WBS_DAT_I;
input [WBS_DAT_WIDTH-1:0] WBS_DAT_O;
output [WBS_DAT_WIDTH/8-1:0] WBS_SEL_I;
output  WBS_WE_I;
input  WBS_ACK_O;
input  WBS_ERR_O;
input  WBS_RTY_O;
output [2:0]WBS_CTI_I;
output [1:0]WBS_BTE_I;
output  WBS_LOCK_I;
output  WBS_CYC_I;
output  WBS_STB_I;
wire [MAX_DAT_WIDTH-1:0] WBM0_DAT_I_INT;
wire [MAX_DAT_WIDTH-1:0] WBM0_DAT_O_INT;
wire [MAX_DAT_WIDTH/8-1:0] WBM0_SEL_O_INT;
wire [MAX_DAT_WIDTH-1:0] WBS_DAT_O_INT;
wire [MAX_DAT_WIDTH-1:0] WBS_DAT_I_INT;
wire [MAX_DAT_WIDTH/8-1:0] WBS_SEL_I_INT;

generate
	if ((WBS_DAT_WIDTH == 8) && ((WBM0_DAT_WIDTH == 32))) begin
		assign WBS_DAT_I = ((WBS_ADR_I[1:0] == 2'b00)
			? WBS_DAT_I_INT[31:24]
			: ((WBS_ADR_I[1:0] == 2'b01)
			? WBS_DAT_I_INT[23:16]
			: ((WBS_ADR_I[1:0] == 2'b10)
			? WBS_DAT_I_INT[15:8]
			: WBS_DAT_I_INT[7:0]
			)));
		assign WBS_SEL_I = ((WBS_ADR_I[1:0] == 2'b00)
			? WBS_SEL_I_INT[3]
			: ((WBS_ADR_I[1:0] == 2'b01)
			? WBS_SEL_I_INT[2]
			: ((WBS_ADR_I[1:0] == 2'b10)
			? WBS_SEL_I_INT[1]
			: WBS_SEL_I_INT[0]
			)));
		assign WBS_DAT_O_INT = {4{WBS_DAT_O}};
	end
	else begin
		assign WBS_DAT_I = WBS_DAT_I_INT;
		assign WBS_SEL_I = WBS_SEL_I_INT;
		assign WBS_DAT_O_INT = WBS_DAT_O;
	end
endgenerate

generate
	if ((WBS_DAT_WIDTH == 32) && (WBM0_DAT_WIDTH == 8)) begin
		assign WBM0_DAT_I = ((WBM0_ADR_O[1:0] == 2'b00)
			? WBM0_DAT_I_INT[31:24]
			: ((WBM0_ADR_O[1:0] == 2'b01)
			? WBM0_DAT_I_INT[23:16]
			: ((WBM0_ADR_O[1:0] == 2'b10)
			? WBM0_DAT_I_INT[15:8]
			: WBM0_DAT_I_INT[7:0]
			)));
		assign WBM0_DAT_O_INT = {4{WBM0_DAT_O}};
		assign WBM0_SEL_O_INT = ((WBM0_ADR_O[1:0] == 2'b00)
			? {WBM0_SEL_O, 3'b000}
			: ((WBM0_ADR_O[1:0] == 2'b01)
			? {1'b0, WBM0_SEL_O, 2'b00}
			: ((WBM0_ADR_O[1:0] == 2'b10)
			? {2'b00, WBM0_SEL_O, 1'b0}
			: {3'b000, WBM0_SEL_O}
			)));
	end
	else if ((WBS_DAT_WIDTH == 8) && (MAX_DAT_WIDTH == 32)) begin
		assign WBM0_DAT_I = WBM0_DAT_I_INT;
		assign WBM0_SEL_O_INT = {4{WBM0_SEL_O}};
		assign WBM0_DAT_O_INT = {4{WBM0_DAT_O}};
	end
	else begin
		assign WBM0_DAT_I = WBM0_DAT_I_INT;
		assign WBM0_SEL_O_INT = WBM0_SEL_O;
		assign WBM0_DAT_O_INT = WBM0_DAT_O;
	end
endgenerate


reg [1-1:0] 		selected; // which master is selected.
reg locked;
always @(posedge clk or posedge reset)
begin
	if (reset) begin
		selected <= #1 0;
		locked   <= #1 0;
	end
	else begin
		if (selected == 0) begin
			if (WBM0_STB_O) begin
				selected <= #1 1'd1;
				locked   <= #1 WBM0_LOCK_O;
			end
		end
		else if (selected == 1'd1) begin
			if ((WBS_ACK_O || WBS_ERR_O || locked) && ((WBM0_CTI_O == 3'b000) || (WBM0_CTI_O == 3'b111) || locked) && !WBM0_LOCK_O) begin
				selected <= #1 0;
				locked <= #1 0;
			end
		end
	end
end

assign WBS_ADR_I = 
	(selected == 1'd1 ? WBM0_ADR_O : 
	0);
assign WBS_DAT_I_INT = 
	(selected == 1'd1 ? WBM0_DAT_O_INT : 
	0);
assign WBS_SEL_I_INT = 
	(selected == 1'd1 ? WBM0_SEL_O_INT : 
	0);
assign WBS_WE_I = 
	(selected == 1'd1 ? WBM0_WE_O : 
	0);
assign WBS_CTI_I = 
	(selected == 1'd1 ? WBM0_CTI_O : 
	0);
assign WBS_BTE_I = 
	(selected == 1'd1 ? WBM0_BTE_O : 
	0);
assign WBS_LOCK_I = 
	(selected == 1'd1 ? WBM0_LOCK_O : 
	0);
assign WBS_CYC_I = 
	(selected == 1'd1 ? WBM0_CYC_O : 
	0);
assign WBS_STB_I = 
	(selected == 1'd1 ? WBM0_STB_O : 
	0);

assign WBM0_DAT_I_INT = (selected == 1'd1 ? WBS_DAT_O_INT : 0);
assign WBM0_ACK_I = (selected == 1'd1 ? WBS_ACK_O : 0);
assign WBM0_ERR_I = (selected == 1'd1 ? WBS_ERR_O : 0);
assign WBM0_RTY_I = (selected == 1'd1 ? WBS_RTY_O : 0);

endmodule

`include "../components/lm32_top/rtl/verilog/lm32_include_all.v"
`include "../components/uart_core/rtl/verilog/uart_core.v"
`include "../components/gpio/rtl/verilog/gpio.v"
`include "../components/gpio/rtl/verilog/tpio.v"
`include "../components/slave_passthru/rtl/verilog/slave_passthru.v"
`include "../components/slave_passthru/rtl/verilog/passthru.v"


module wb_soc_v2 ( 
	clk_i,reset_n
, uartSIN
, uartSOUT
, gpioPIO_BOTH_IN
, gpioPIO_BOTH_OUT
, slave_passthruclk
, slave_passthrurst
, slave_passthruslv_adr
, slave_passthruslv_master_data
, slave_passthruslv_slave_data
, slave_passthruslv_strb
, slave_passthruslv_cyc
, slave_passthruslv_ack
, slave_passthruslv_err
, slave_passthruslv_rty
, slave_passthruslv_sel
, slave_passthruslv_we
, slave_passthruslv_bte
, slave_passthruslv_cti
, slave_passthruslv_lock
, slave_passthruintr_active_high
);
input	clk_i, reset_n;
genvar i;
wire [31:0] zwire = 32'hZZZZZZZZ;
wire [31:0] zerowire = 32'h00000000;

wire [31:0] LM32I_ADR_O;
wire [31:0] LM32I_DAT_O;
wire [31:0] LM32I_DAT_I;
wire [3:0] LM32I_SEL_O;
wire   LM32I_WE_O;
wire   LM32I_ACK_I;
wire   LM32I_ERR_I;
wire   LM32I_RTY_I;
wire [2:0] LM32I_CTI_O;
wire [1:0] LM32I_BTE_O;
wire   LM32I_LOCK_O;
wire   LM32I_CYC_O;
wire   LM32I_STB_O;
wire [31:0] LM32D_ADR_O;
wire [31:0] LM32D_DAT_O;
wire [31:0] LM32D_DAT_I;
wire [3:0] LM32D_SEL_O;
wire   LM32D_WE_O;
wire   LM32D_ACK_I;
wire   LM32D_ERR_I;
wire   LM32D_RTY_I;
wire [2:0] LM32D_CTI_O;
wire [1:0] LM32D_BTE_O;
wire   LM32D_LOCK_O;
wire   LM32D_CYC_O;
wire   LM32D_STB_O;
wire [31:0] LM32DEBUGDEBUG_DAT_O;
wire   LM32DEBUGDEBUG_ACK_O;
wire   LM32DEBUGDEBUG_ERR_O;
wire   LM32DEBUGDEBUG_RTY_O;
wire LM32DEBUGDEBUG_en;
wire [31:0] LM32interrupt_n;

wire [7:0] uartUARTUART_DAT_O;
wire   uartUARTUART_ACK_O;
wire   uartUARTUART_ERR_O;
wire   uartUARTUART_RTY_O;
wire uartUARTUART_en;
wire uartINTR;
input  uartSIN;
output  uartSOUT;

wire [31:0] gpioGPIOGPIO_DAT_O;
wire   gpioGPIOGPIO_ACK_O;
wire   gpioGPIOGPIO_ERR_O;
wire   gpioGPIOGPIO_RTY_O;
wire gpioGPIOGPIO_en;
wire gpioIRQ_O;
input [4-1:0] gpioPIO_BOTH_IN;
output [4-1:0] gpioPIO_BOTH_OUT;

wire [31:0] slave_passthruSS_DAT_O;
wire   slave_passthruSS_ACK_O;
wire   slave_passthruSS_ERR_O;
wire   slave_passthruSS_RTY_O;
wire slave_passthruSS_en;
wire slave_passthruINTR_O;
output  slave_passthruclk;
output  slave_passthrurst;
output [32-1:0] slave_passthruslv_adr;
output [32-1:0] slave_passthruslv_master_data;
input [32-1:0] slave_passthruslv_slave_data;
output  slave_passthruslv_strb;
output  slave_passthruslv_cyc;
input  slave_passthruslv_ack;
input  slave_passthruslv_err;
input  slave_passthruslv_rty;
output [3:0]  slave_passthruslv_sel;
output  slave_passthruslv_we;
output [1:0]  slave_passthruslv_bte;
output [2:0]  slave_passthruslv_cti;
output  slave_passthruslv_lock;
input  slave_passthruintr_active_high;
reg [2:0] counter;
wire sys_reset = !counter[2];
always @(posedge clk_i or negedge reset_n)
if (reset_n == 1'b0)
counter <= #1 3'b000;
else
if (counter[2] == 1'b0)
counter <= #1 counter + 1'b1;

wire gpioGPIO_ERR_O;
wire slave_passthruS_ERR_O;
wire uartUART_ERR_O;
wire [31:0] gpioGPIO_DAT_O;
wire [31:0] slave_passthruS_DAT_O;
wire [31:0] uartUART_DAT_O;

wire one_zero = 1'b0;
wire[1:0] two_zero = 2'b00;
wire[2:0] three_zero = 3'b000;
wire[3:0] four_zero = 4'b0000;
wire[31:0] thirtytwo_zero = 32'b0000_0000_0000_0000_0000_0000_0000_0000;

assign gpioGPIO_ERR_O = 0;
assign slave_passthruS_ERR_O = 0;
assign uartUART_ERR_O = 0;

assign uartUART_DAT_O = (LM32D_STB_O && uartUARTUART_en) ? uartUARTUART_DAT_O : 0;
assign gpioGPIO_DAT_O = (LM32D_STB_O && gpioGPIOGPIO_en) ? gpioGPIOGPIO_DAT_O : 0;
assign slave_passthruS_DAT_O = (LM32D_STB_O && slave_passthruSS_en) ? slave_passthruSS_DAT_O : 0;


assign LM32D_ACK_I = uartUARTUART_ACK_O |
 gpioGPIOGPIO_ACK_O |
 slave_passthruSS_ACK_O;

assign LM32D_RTY_I = uartUARTUART_RTY_O |
 gpioGPIOGPIO_RTY_O |
 slave_passthruSS_RTY_O;

assign LM32D_DAT_I = {4{uartUART_DAT_O[7:0]}} |
 gpioGPIO_DAT_O |
 slave_passthruS_DAT_O;

assign LM32I_ERR_I = 1;
assign LM32D_ERR_I = uartUARTUART_en ? uartUART_ERR_O : 
gpioGPIOGPIO_en ? gpioGPIO_ERR_O : 
slave_passthruSS_en ? slave_passthruS_ERR_O : 
1;



assign LM32DEBUG_en = 0;
lm32_top 
 LM32( 
.I_ADR_O(LM32I_ADR_O),
.I_DAT_O(LM32I_DAT_O),
.I_DAT_I(LM32I_DAT_I),
.I_SEL_O(LM32I_SEL_O),
.I_WE_O(LM32I_WE_O),
.I_ACK_I(LM32I_ACK_I),
.I_ERR_I(LM32I_ERR_I),
.I_RTY_I(LM32I_RTY_I),
.I_CTI_O(LM32I_CTI_O),
.I_BTE_O(LM32I_BTE_O),
.I_LOCK_O(LM32I_LOCK_O),
.I_CYC_O(LM32I_CYC_O),
.I_STB_O(LM32I_STB_O),
.D_ADR_O(LM32D_ADR_O),
.D_DAT_O(LM32D_DAT_O),
.D_DAT_I(LM32D_DAT_I),
.D_SEL_O(LM32D_SEL_O),
.D_WE_O(LM32D_WE_O),
.D_ACK_I(LM32D_ACK_I),
.D_ERR_I(LM32D_ERR_I),
.D_RTY_I(LM32D_RTY_I),
.D_CTI_O(LM32D_CTI_O),
.D_BTE_O(LM32D_BTE_O),
.D_LOCK_O(LM32D_LOCK_O),
.D_CYC_O(LM32D_CYC_O),
.D_STB_O(LM32D_STB_O),
.DEBUG_ADR_I('b0),
.DEBUG_DAT_I('b0),
.DEBUG_DAT_O(),
.DEBUG_SEL_I('b0),
.DEBUG_WE_I('b0),
.DEBUG_ACK_O(),
.DEBUG_ERR_O(),
.DEBUG_RTY_O(),
.DEBUG_CTI_I('b0),
.DEBUG_BTE_I('b0),
.DEBUG_LOCK_I('b0),
.DEBUG_CYC_I('b0),
.DEBUG_STB_I('b0),
.interrupt_n(LM32interrupt_n),
.clk_i (clk_i), .rst_i (sys_reset));


assign uartUARTUART_en = (LM32D_ADR_O[31:4] == 28'b1000000100000000000000000000);
wire [7:0] uartUART_DAT_I;
assign uartUART_DAT_I = ((
	LM32D_ADR_O[1:0] == 2'b00) ? LM32D_DAT_O[31:24] : ((
	LM32D_ADR_O[1:0] == 2'b01) ? LM32D_DAT_O[23:16] : ((
	LM32D_ADR_O[1:0] == 2'b10) ? LM32D_DAT_O[15:8] : LM32D_DAT_O[7:0])));
wire uartUART_SEL_I;
assign uartUART_SEL_I = ((
	LM32D_ADR_O[1:0] == 2'b00) ? LM32D_SEL_O[3] : ((
	LM32D_ADR_O[1:0] == 2'b01) ? LM32D_SEL_O[2] : ((
	LM32D_ADR_O[1:0] == 2'b10) ? LM32D_SEL_O[1] : LM32D_SEL_O[0])));
uart_core 
#(
.UART_WB_DAT_WIDTH(8),
.UART_WB_ADR_WIDTH(4),
.CLK_IN_MHZ(66.6667),
.BAUD_RATE(115200),
.STDOUT_SIM(0),
.STDOUT_SIMFAST(0),
.LCR_DATA_BITS(8),
.LCR_STOP_BITS(1),
.LCR_PARITY_ENABLE(0),
.LCR_PARITY_ODD(0),
.LCR_PARITY_STICK(0),
.LCR_SET_BREAK(0),
.FIFO(0))
 uart( 
.UART_ADR_I(LM32D_ADR_O[3:0]),
.UART_DAT_I(uartUART_DAT_I[7:0]),
.UART_DAT_O(uartUARTUART_DAT_O[7:0]),
.UART_SEL_I(uartUART_SEL_I),
.UART_WE_I(LM32D_WE_O),
.UART_ACK_O(uartUARTUART_ACK_O),
.UART_ERR_O(uartUARTUART_ERR_O),
.UART_RTY_O(uartUARTUART_RTY_O),
.UART_CTI_I(LM32D_CTI_O),
.UART_BTE_I(LM32D_BTE_O),
.UART_LOCK_I(LM32D_LOCK_O),
.UART_CYC_I(LM32D_CYC_O & uartUARTUART_en),
.UART_STB_I(LM32D_STB_O & uartUARTUART_en),
.SIN(uartSIN),
.SOUT(uartSOUT),
.INTR(uartINTR),
.CLK(clk_i), .RESET(sys_reset));


assign gpioGPIOGPIO_en = (LM32D_ADR_O[31:4] == 28'b1000001000000000000000000000);
wire [31:0] gpioGPIO_DAT_I;
assign gpioGPIO_DAT_I = LM32D_DAT_O[31:0];
wire [3:0] gpioGPIO_SEL_I;
assign gpioGPIO_SEL_I = LM32D_SEL_O;
gpio 
#(
.GPIO_WB_DAT_WIDTH(32),
.GPIO_WB_ADR_WIDTH(4),
.OUTPUT_PORTS_ONLY(0),
.INPUT_PORTS_ONLY(0),
.TRISTATE_PORTS(0),
.BOTH_INPUT_AND_OUTPUT(1),
.DATA_WIDTH(32'h1),
.INPUT_WIDTH(32'h4),
.OUTPUT_WIDTH(32'h4),
.IRQ_MODE(0),
.LEVEL(0),
.EDGE(1),
.EITHER_EDGE_IRQ(0),
.POSE_EDGE_IRQ(1),
.NEGE_EDGE_IRQ(0))
 gpio( 
.GPIO_ADR_I(LM32D_ADR_O[3:0]),
.GPIO_DAT_I(gpioGPIO_DAT_I[31:0]),
.GPIO_DAT_O(gpioGPIOGPIO_DAT_O[31:0]),
.GPIO_SEL_I(gpioGPIO_SEL_I[3:0]),
.GPIO_WE_I(LM32D_WE_O),
.GPIO_ACK_O(gpioGPIOGPIO_ACK_O),
.GPIO_ERR_O(gpioGPIOGPIO_ERR_O),
.GPIO_RTY_O(gpioGPIOGPIO_RTY_O),
.GPIO_CTI_I(LM32D_CTI_O),
.GPIO_BTE_I(LM32D_BTE_O),
.GPIO_LOCK_I(LM32D_LOCK_O),
.GPIO_CYC_I(LM32D_CYC_O & gpioGPIOGPIO_en),
.GPIO_STB_I(LM32D_STB_O & gpioGPIOGPIO_en),
.PIO_BOTH_IN(gpioPIO_BOTH_IN),
.PIO_BOTH_OUT(gpioPIO_BOTH_OUT),
.IRQ_O(gpioIRQ_O),
.CLK_I(clk_i), .RST_I(sys_reset));


assign slave_passthruSS_en = (LM32D_ADR_O[31:24] == 8'b10000000);
wire [31:0] slave_passthruS_DAT_I;
assign slave_passthruS_DAT_I = LM32D_DAT_O[31:0];
wire [3:0] slave_passthruS_SEL_I;
assign slave_passthruS_SEL_I = LM32D_SEL_O;
slave_passthru 
#(
.S_WB_DAT_WIDTH(32),
.S_WB_ADR_WIDTH(32))
 slave_passthru( 
.S_ADR_I(LM32D_ADR_O[31:0]),
.S_DAT_I(slave_passthruS_DAT_I[31:0]),
.S_DAT_O(slave_passthruSS_DAT_O[31:0]),
.S_SEL_I(slave_passthruS_SEL_I[3:0]),
.S_WE_I(LM32D_WE_O),
.S_ACK_O(slave_passthruSS_ACK_O),
.S_ERR_O(slave_passthruSS_ERR_O),
.S_RTY_O(slave_passthruSS_RTY_O),
.S_CTI_I(LM32D_CTI_O),
.S_BTE_I(LM32D_BTE_O),
.S_LOCK_I(LM32D_LOCK_O),
.S_CYC_I(LM32D_CYC_O & slave_passthruSS_en),
.S_STB_I(LM32D_STB_O & slave_passthruSS_en),
.clk(slave_passthruclk),
.rst(slave_passthrurst),
.slv_adr(slave_passthruslv_adr),
.slv_master_data(slave_passthruslv_master_data),
.slv_slave_data(slave_passthruslv_slave_data),
.slv_strb(slave_passthruslv_strb),
.slv_cyc(slave_passthruslv_cyc),
.slv_ack(slave_passthruslv_ack),
.slv_err(slave_passthruslv_err),
.slv_rty(slave_passthruslv_rty),
.slv_sel(slave_passthruslv_sel),
.slv_we(slave_passthruslv_we),
.slv_bte(slave_passthruslv_bte),
.slv_cti(slave_passthruslv_cti),
.slv_lock(slave_passthruslv_lock),
.intr_active_high(slave_passthruintr_active_high),
.INTR_O(slave_passthruINTR_O),
.CLK_I(clk_i), .RST_I(sys_reset));
assign LM32interrupt_n[2] = !uartINTR ;
assign LM32interrupt_n[1] = !slave_passthruINTR_O ;
assign LM32interrupt_n[0] = 1;
assign LM32interrupt_n[3] = 1;
assign LM32interrupt_n[4] = 1;
assign LM32interrupt_n[5] = 1;
assign LM32interrupt_n[6] = 1;
assign LM32interrupt_n[7] = 1;
assign LM32interrupt_n[8] = 1;
assign LM32interrupt_n[9] = 1;
assign LM32interrupt_n[10] = 1;
assign LM32interrupt_n[11] = 1;
assign LM32interrupt_n[12] = 1;
assign LM32interrupt_n[13] = 1;
assign LM32interrupt_n[14] = 1;
assign LM32interrupt_n[15] = 1;
assign LM32interrupt_n[16] = 1;
assign LM32interrupt_n[17] = 1;
assign LM32interrupt_n[18] = 1;
assign LM32interrupt_n[19] = 1;
assign LM32interrupt_n[20] = 1;
assign LM32interrupt_n[21] = 1;
assign LM32interrupt_n[22] = 1;
assign LM32interrupt_n[23] = 1;
assign LM32interrupt_n[24] = 1;
assign LM32interrupt_n[25] = 1;
assign LM32interrupt_n[26] = 1;
assign LM32interrupt_n[27] = 1;
assign LM32interrupt_n[28] = 1;
assign LM32interrupt_n[29] = 1;
assign LM32interrupt_n[30] = 1;
assign LM32interrupt_n[31] = 1;
endmodule
